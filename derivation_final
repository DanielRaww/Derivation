#! /usr/bin/python

#Daniel Raw
#Principles of Programming Languages

import sys
import string
import os

#returns 1 if there is a nonterminal in the array
def hasNonTerminal(array, dict):
	for item in array:
		if(dict.has_key(item)):
			return 1
	return 0

#returns the index of the leftmost nonterminal, or -1 if it does not exist
def getLeftMostNonTerminal(array, dict):
	ctr = 0
	for item in array:
		if(dict.has_key(item)):
			return ctr
		else:
			ctr += 1
	return -1

#prints results from array
def printResults(theList):
	for item in theList:
		print item,
	print

maxLength = 5

#check number of arguments
if len(sys.argv) < 2 or len(sys.argv) > 3:
    print "\nUsage: python derive.py [-l length] grammarfile\n"
    sys.exit()

#check validity of arguments
#first argument should be length or filename
if len(sys.argv) == 3 and len(sys.argv[1]) > 2 and cmp(sys.argv[1][0:2], "-l") == 0 and sys.argv[1].strip("-l").isdigit() and int(sys.argv[1].strip("-l")) > 0:

	#set custom length
	maxLength = int(sys.argv[1].strip("-l"))

	#check that next arg is grammarfile
	if os.path.isfile(sys.argv[2]):
		#store filename
		file = sys.argv[2]
	else:
		print "\nInvalid grammarfile \nUsage: python derive.py [-l length] grammarfile\n"
		sys.exit()

elif len(sys.argv) == 2 and os.path.isfile(sys.argv[1]):
	#store filename
	file = sys.argv[1]
else:
	print "\nUsage: python derive.py [-l length] grammarfile\n"
	sys.exit()

#try to open file
try:
	fd = open(file, "r")
except:
	print "\nInvalid grammarfile\n"

once = 0
#stores definitions
dict = {}
#stores results
results = {}
#stores candidate terminal strings
simpleList = []

#setup data to work with
for line in fd:
	#get start symbol
	if once == 0:
		start = line.split()[0]
		once += 1

	#add key with empty list if it does not already exist
	if not dict.has_key(line.split()[0]):
		dict[line.split()[0]] = []

	#store values to list (in an array for each char)
	#got rid of following 2 lines and replaced with the next 2 for more robust implementation
	#dict[line.split()[0]].append(line.split("=")[1].split())
	#simpleList.append(line.split("=")[1].split())
	dict[line.split()[0]].append(line.split()[2:])
	simpleList.append(line.split()[2:])

while len(simpleList) > 0:
	#remove first item from list and store to temp array
	array = simpleList.pop(0)

	#check length of string
	if len(array) <= maxLength:
		#print if no non terminable
		if hasNonTerminal(array, dict):
			#get first
			count = getLeftMostNonTerminal(array, dict)
			if dict.has_key(array[count]):
				for terminable in dict[array[count]]:
					tmp2Array = []
					tmp2Array.extend(array)
					tmp2Array.pop(count)
					ctr = count
					for char in terminable:
						tmp2Array.insert(ctr, char)
						ctr += 1
					simpleList.append(tmp2Array)
		else:
			#if not results.has_key(str(array).strip("[").strip("]").strip("'")):
			#	results[str(array).strip("[").strip("]").strip("'")] = array
				printResults(array)
